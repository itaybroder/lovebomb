generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  provider       String?
  accounts       Account[]

  postsReported  ReportedPosts[]  
  postsLiked     LikedPosts[]
  skippedPosts   SkippedPosts[]
  emails         Email[]

} 

model Email {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  address String  @unique
  userId  String  @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
}

model ReportedPosts{
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    postId            String  @db.ObjectId
    timestamp         DateTime
    amountOfReports   Int

    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SkippedPosts{
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    postId            String  @db.ObjectId
    timestamp         DateTime
    amountOfReports   Int

    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LikedPosts{
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    postId            String  @db.ObjectId
    timestamp         DateTime
    amountOfReports   Int

    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Posts {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  type        PostType
  platform    PostPlatfoms
}

enum PostType {
  BAD
  GOOD
  UNKNOWN
}

enum PostPlatfoms {
  INSTAGRAM
  TWITTER
  TIKTOK
  YOUTUBE
  LINKEDIN
  FACEBOOK
  UNKNOWN
}

